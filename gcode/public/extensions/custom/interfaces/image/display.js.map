{"version":3,"sources":["../node_modules/@directus/extension-toolkit/mixins/interface.js","display.vue"],"names":[],"mappings":";AAAA,OAAA,QAAA,CACA,MAAA,CAIA,GAAA,CACA,KAAA,OACA,UAAA,GAGA,KAAA,CACA,KAAA,OACA,UAAA,GAIA,MAAA,CACA,KAAA,KACA,QAAA,MAGA,KAAA,CACA,KAAA,OACA,UAAA,GAGA,OAAA,CACA,KAAA,CAAA,OAAA,QACA,QAAA,MAGA,SAAA,CACA,KAAA,QACA,SAAA,GAGA,SAAA,CACA,KAAA,QACA,SAAA,GAGA,QAAA,CACA,KAAA,OACA,QAAA,KAAA,KAGA,QAAA,CACA,KAAA,QACA,SAAA,GAIA,SAAA,CACA,KAAA,OACA,QAAA,MAGA,OAAA,CACA,KAAA,OACA,QAAA,MAIA,OAAA,CACA,KAAA,OACA,QAAA;;ACtDA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAFA,IAAA,EAAA,EAAA,QAAA,iDAEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,IAAA,EAAA,CACA,OAAA,CAAA,EAAA,SACA,SAAA,CACA,SAAA,WACA,OAAA,KAAA,SAAA,cAAA,OAEA,KAAA,QAAA,aACA,KAAA,UAIA,QAAA,CACA,iBAAA,SAAA,GACA,KAAA,MAAA,KAbA,QAAA,QAAA","file":"display.js","sourceRoot":"../src","sourcesContent":["module.exports = {\n  props: {\n    // Unique id for this interface. Should be added to the lower level \n    // HTML input element if applicable. This ID will be used in the label's\n    // `for` attribute\n    id: {\n      type: String,\n      required: true\n    },\n    // Name of the field\n    name: {\n      type: String,\n      required: true\n    },\n    // The current value. This can either be the default value, the saved database\n    // value or the current state after the user made an edit\n    value: {\n      type: null,\n      default: null\n    },\n    // Type of the field, eg `string`, `hash`, or `array`\n    type: {\n      type: String,\n      required: true\n    },\n    // Max length\n    length: {\n      type: [String, Number],\n      default: null\n    },\n    // If the field is readonly or not\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    // If the field is required or not\n    required: {\n      type: Boolean,\n      default: false\n    },\n    // Field options. A json object based on the interface's meta.json file\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    // If the item that's currently being edited is new\n    newItem: {\n      type: Boolean,\n      default: false\n    },\n    // The relation of the current field. Will contain information on the related\n    // collection and field(s)\n    relation: {\n      type: Object,\n      default: null\n    },\n    // The other fields in the current edit page\n    fields: {\n      type: Object,\n      default: null\n    },\n    // The values of the other fields on the edit page. Can be used for things like\n    // automatically generating a slug based on another field\n    values: {\n      type: Object,\n      default: null\n    }\n  }\n};\n","<template>\n \n\t<div class=\"readonly-single-file no-wrap\">\n\t\t<img v-if=\"imageUrl && !error\" :src=\"imageUrl\" @error=\"handleImageError\" />\n\t \n\t</div>\n</template>\n\n<script>\nimport mixin from '@directus/extension-toolkit/mixins/interface';\n\nexport default {\n\tmixins: [mixin],\n\tcomputed: {\n\t\timageUrl() {\n\t\t\treturn this.$helpers.micromustache.render(\n\t\t\t\t// this.values doesn't exist on the Browse Items page yet. It will be added soon, and then this will work\n\t\t\t\tthis.options.url_template, // \"Hello {{text}}!\"\n\t\t\t\tthis.values // { text: \"World\" }\n\t\t\t);\n\t\t}\n\t},\n\tmethods: {\n\t\thandleImageError(error) {\n\t\t\tthis.error = error;\n\t\t}\n\t}\n};\n</script>\n\n<style lang=\"scss\" scoped>\nimg {\n\twidth: 24px;\n\theight: 24px;\n\tobject-fit: cover;\n\tborder-radius: 2px;\n\tdisplay: block;\n}\n\n.spinner {\n\tdisplay: inline-block;\n}\n\ni {\n\tcolor: var(--blue-grey-200);\n}\n</style>\n"]}